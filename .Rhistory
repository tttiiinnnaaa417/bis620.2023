bootstrap_estimates <- function(data, indices) {
d <- data[indices, ] # Resample the data
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(data, 100, bootstrap_estimates)
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
# Data preprocessing
# Recoding 'abandoned' variable
data$abandoned <- ifelse(data$abandoned > 0, 1, 0)
# Fitting the Logistic Regression Model
model <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data, family = "binomial")
# Summarize the model
summary(model)
# Bootstrap for assessing stability of regression estimates
bootstrap_estimates <- function(data, indices) {
d <- data[indices, ] # Resample the data
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(data, 915, bootstrap_estimates)
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
# Data preprocessing
# Recoding 'abandoned' variable
data$abandoned <- ifelse(data$abandoned > 0, 1, 0)
# Fitting the Logistic Regression Model
model <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data, family = "binomial")
# Summarize the model
summary(model)
# Bootstrap for assessing stability of regression estimates
bootstrap_estimates <- function(data, indices) {
d <- data[indices, ] # Resample the data
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(data, 915, bootstrap_estimates, data = data)
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
# Data preprocessing
# Recoding 'abandoned' variable
data$abandoned <- ifelse(data$abandoned > 0, 1, 0)
# Fitting the Logistic Regression Model
model <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data, family = "binomial")
# Summarize the model
summary(model)
# Bootstrap for assessing stability of regression estimates
bootstrap_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(1:nrow(data), 915, bootstrap_estimates, data = data)
boot_coefs <- boot_results$thetastar
# Calculating standard errors from bootstrap
se_boot <- apply(boot_coefs, 2, sd)
se_boot
# Jackknife for outlier detection
jackknife_estimates <- function(data, indices) {
d <- data[indices, ]
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit))
}
# Perform jackknife
jack_results <- jackknife(1:nrow(data), jackknife_estimates, data = data)
jack_coefs <- jack_results$thetastar
# Identifying outliers using DFBETAS
dfbetas_values <- apply(jack_coefs, 2, function(x) (x - coef(model)) / se_boot)
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
# Data preprocessing
# Recoding 'abandoned' variable
data$abandoned <- ifelse(data$abandoned > 0, 1, 0)
# Fitting the Logistic Regression Model
model <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data, family = "binomial")
# Summarize the model
summary(model)
# Bootstrap for assessing stability of regression estimates
bootstrap_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(1:nrow(data), 915, bootstrap_estimates, data = data)
boot_coefs <- boot_results$thetastar
# Calculating standard errors from bootstrap
se_boot <- apply(boot_coefs, 2, sd)
se_boot
# Jackknife for outlier detection
jackknife_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform jackknife
jack_results <- jackknife(1:nrow(data), jackknife_estimates, data = data)
jack_coefs <- jack_results$thetastar
# Identifying outliers using DFBETAS
dfbetas_values <- apply(jack_coefs, 2, function(x) (x - coef(model)) / se_boot)
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
# Data preprocessing
# Recoding 'abandoned' variable
data$abandoned <- ifelse(data$abandoned > 0, 1, 0)
# Fitting the Logistic Regression Model
model <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data, family = "binomial")
# Summarize the model
summary(model)
# Bootstrap for assessing stability of regression estimates
bootstrap_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(1:nrow(data), 1000, bootstrap_estimates, data = data)
boot_coefs <- boot_results$thetastar
# Calculating standard errors from bootstrap
se_boot <- apply(boot_coefs, 2, sd)
se_boot
# Jackknife for outlier detection
jackknife_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- try(glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial"), silent = TRUE)
# Check if the model was successfully fitted
if(class(fit) == "try-error") {
return(rep(NA, length(coef(model)))) # Return NA if the model fitting failed
} else {
return(coef(fit)) # Return coefficients
}
}
# Perform jackknife
jack_results <- jackknife(1:nrow(data), jackknife_estimates, data = data)
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
# Data preprocessing
# Recoding 'abandoned' variable
data$abandoned <- ifelse(data$abandoned > 0, 1, 0)
# Fitting the Logistic Regression Model
model <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data, family = "binomial")
# Summarize the model
summary(model)
# Bootstrap for assessing stability of regression estimates
bootstrap_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(1:nrow(data), 1000, bootstrap_estimates, data = data)
boot_coefs <- boot_results$thetastar
# Calculating standard errors from bootstrap
se_boot <- apply(boot_coefs, 2, sd)
se_boot
# Jackknife for outlier detection
# Jackknife for outlier detection
jackknife_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- try(glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial"), silent = TRUE)
# Check if the model was successfully fitted
if("try-error" %in% class(fit)) {
return(rep(NA, length(coef(model)))) # Return NA if the model fitting failed
} else {
return(coef(fit)) # Return coefficients
}
}
# Perform jackknife
jack_results <- jackknife(1:nrow(data), jackknife_estimates, data = data)
jack_coefs <- jack_results$thetastar
# Ensure jack_coefs is a matrix with appropriate dimensions
if (is.null(dim(jack_coefs))) {
# If jack_coefs is not a matrix (e.g., a vector), convert it into a matrix
jack_coefs <- matrix(jack_coefs, ncol = length(jack_coefs))
}
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
# Data preprocessing
# Recoding 'abandoned' variable
data$abandoned <- ifelse(data$abandoned > 0, 1, 0)
# Fitting the Logistic Regression Model
model <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data, family = "binomial")
# Summarize the model
summary(model)
# Bootstrap for assessing stability of regression estimates
bootstrap_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit)) # Return coefficients
}
# Perform bootstrap
set.seed(123) # For reproducibility
boot_results <- bootstrap(1:nrow(data), 1000, bootstrap_estimates, data = data)
boot_coefs <- boot_results$thetastar
# Calculating standard errors from bootstrap
se_boot <- apply(boot_coefs, 2, sd)
se_boot
# Jackknife for outlier detection
# Jackknife for outlier detection
# Jackknife for outlier detection
jackknife_estimates <- function(indices, data) {
d <- data[indices, ] # Resample the data using indices
fit <- try(glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial"), silent = TRUE)
# Define a template for coefficients
coef_template <- rep(NA, length(coef(model)))
# Check if the model was successfully fitted
if("try-error" %in% class(fit)) {
return(coef_template) # Return NA vector if the model fitting failed
} else {
fitted_coefs <- coef(fit)
coef_template[1:length(fitted_coefs)] <- fitted_coefs
return(coef_template) # Return coefficients, filling missing with NA
}
}
# Perform jackknife
jack_results <- jackknife(1:nrow(data), jackknife_estimates, data = data)
jack_coefs <- jack_results$thetastar
# Check if the dimensions of jack_coefs and se_boot are compatible
if (!is.null(dim(jack_coefs)) && length(se_boot) == ncol(jack_coefs)) {
# Identifying outliers using DFBETAS
dfbetas_values <- apply(jack_coefs, 2, function(x) (x - coef(model)) / se_boot)
outliers <- which(abs(dfbetas_values) > 2, arr.ind = TRUE)
# Print outliers
print("Outliers (if any):")
print(data[outliers, ])
} else {
print("Error: Mismatch in dimensions or jackknife results are not as expected.")
}
# Comments: The script includes revised jackknife estimates to handle situations where the glm model might fail on subsets of the data.
# It ensures consistent output length for each jackknife sample, allowing for proper outlier detection.
library(boot)
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
data <- read_excel("drug_abandonment.xlsx")
library(boot)
# Logistic Regression Model
# Assuming 'abandoned' is already coded as 0 and 1
mylogit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = mydata, family = "binomial")
library(bootstrap)
library(readxl)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
mydata <- read_excel("drug_abandonment.xlsx")
library(boot)
# Logistic Regression Model
# Assuming 'abandoned' is already coded as 0 and 1
mylogit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = mydata, family = "binomial")
library(bootstrap)
library(readxl)
library(boot)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
mydata <- read_excel("drug_abandonment.xlsx")
# Recoding 'abandoned' variable as binary (0, 1)
mydata$abandoned <- ifelse(mydata$abandoned > 0, 1, 0)
# Logistic Regression Model
# Modeling the impact of pharmaceutical discount programs on patient abandonment
mylogit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = mydata, family = "binomial")
# Summary of the logistic regression model
summary(mylogit)
# Function for Bootstrapping
# Applies logistic regression on bootstrapped samples to assess stability of estimates
logit.boot <- function(data, indices) {
d <- data[indices,] # Bootstrapping sample
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit))
}
# Applying Bootstrapping
# 1000 bootstrap replications
set.seed(123) # Set seed for reproducibility
results.boot <- boot(data = mydata, statistic = logit.boot, R = 1000)
# Summary of Bootstrapping Results
print(results.boot)
# Jackknife Function
# Performs logistic regression omitting one observation at a time
logit.jack <- function(data, index) {
d <- data[-index,] # Removing one observation for jackknife
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit))
}
# Applying Jackknife
results.jack <- jackknife(data = mydata, statistic = logit.jack)
library(bootstrap)
library(readxl)
library(boot)
# Read the Data
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
mydata <- read_excel("drug_abandonment.xlsx")
# Recoding 'abandoned' variable as binary (0, 1)
mydata$abandoned <- ifelse(mydata$abandoned > 0, 1, 0)
# Logistic Regression Model
# Modeling the impact of pharmaceutical discount programs on patient abandonment
mylogit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = mydata, family = "binomial")
# Summary of the logistic regression model
summary(mylogit)
# Function for Bootstrapping
# Applies logistic regression on bootstrapped samples to assess stability of estimates
logit.boot <- function(data, indices) {
d <- data[indices,] # Bootstrapping sample
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit))
}
# Applying Bootstrapping
# 1000 bootstrap replications
set.seed(123) # Set seed for reproducibility
results.boot <- boot(data = mydata, statistic = logit.boot, R = 1000)
# Summary of Bootstrapping Results
print(results.boot)
# Manual Jackknife Procedure
jack_coefs <- matrix(NA, nrow = nrow(mydata), ncol = length(coef(mylogit)))
colnames(jack_coefs) <- names(coef(mylogit))
for (i in 1:nrow(mydata)) {
data_jack <- mydata[-i, ] # Omit one observation
fit_jack <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data_jack, family = "binomial")
jack_coefs[i, ] <- coef(fit_jack)
}
# Calculating differences between jackknife and full model coefficients
full_model_coefs <- coef(mylogit)
jack_diffs <- sweep(jack_coefs, 2, full_model_coefs, "-")
# Compute influence measure for each observation
influence_measure <- apply(jack_diffs, 1, function(x) sqrt(sum(x^2)))
# Define a threshold for significant influence
threshold <- mean(influence_measure) + 2 * sd(influence_measure)
# Identify outliers
outliers <- which(influence_measure > threshold)
# Printing Outliers
print(outliers)
# Conclusions
# - The bootstrapping results indicate the stability/variability of the coefficients.
# - The manual jackknife results identify potential outliers or influential observations.
# - Based on the outliers identified, further investigation or data cleaning
library(readxl)
library(boot)
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
mydata <- read_excel("drug_abandonment.xlsx")
mydata$abandoned <- ifelse(mydata$abandoned > 0, 1, 0)
mylogit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = mydata, family = "binomial")
summary(mylogit)
logit.boot <- function(data, indices) {
d <- data[indices,]
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit))
}
set.seed(123)
results.boot <- boot(data = mydata, statistic = logit.boot, R = 1000)
print(results.boot)
jack_coefs <- matrix(NA, nrow = nrow(mydata), ncol = length(coef(mylogit)))
colnames(jack_coefs) <- names(coef(mylogit))
for (i in 1:nrow(mydata)) {
data_jack <- mydata[-i, ]
fit_jack <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data_jack, family = "binomial")
jack_coefs[i, ] <- coef(fit_jack)
}
# Calculating differences between jackknife and full model coefficients
full_model_coefs <- coef(mylogit)
jack_diffs <- sweep(jack_coefs, 2, full_model_coefs, "-")
# Compute influence measure for each observation
influence_measure <- apply(jack_diffs, 1, function(x) sqrt(sum(x^2)))
# Define a threshold for significant influence
threshold <- mean(influence_measure) + 2 * sd(influence_measure)
# Identify outliers
outliers <- which(influence_measure > threshold)
# Printing Outliers
print(outliers)
# Conclusions
# - The bootstrapping results indicate the stability/variability of the coefficients.
# - The manual jackknife results identify potential outliers or influential observations.
# - Based on the outliers identified, further investigation or data cleaning
library(readxl)
library(boot)
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
mydata <- read_excel("drug_abandonment.xlsx")
mydata$abandoned <- ifelse(mydata$abandoned > 0, 1, 0)
mylogit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = mydata, family = "binomial")
summary(mylogit)
logit.boot <- function(data, indices) {
d <- data[indices,]
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit))
}
set.seed(123)
results.boot <- boot(data = mydata, statistic = logit.boot, R = 1000)
print(results.boot)
jack_coefs <- matrix(NA, nrow = nrow(mydata), ncol = length(coef(mylogit)))
colnames(jack_coefs) <- names(coef(mylogit))
for (i in 1:nrow(mydata)) {
data_jack <- mydata[-i, ]
fit_jack <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data_jack, family = "binomial")
jack_coefs[i, ] <- coef(fit_jack)
}
# Calculating differences between jackknife and full model coefficients
full_model_coefs <- coef(mylogit)
jack_diffs <- sweep(jack_coefs, 2, full_model_coefs, "-")
# Compute influence measure for each observation
influence_measure <- apply(jack_diffs, 1, function(x) sqrt(sum(x^2)))
# Define a threshold for significant influence
threshold <- mean(influence_measure) + 2 * sd(influence_measure)
# Identify outliers
outliers <- which(influence_measure > threshold)
# Printing Outliers
print(outliers)
library(readxl)
library(boot)
setwd("/Users/tianyigao/Desktop/BIS 679/HW7")
mydata <- read_excel("drug_abandonment.xlsx")
mydata$abandoned <- ifelse(mydata$abandoned > 0, 1, 0)
mylogit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = mydata, family = "binomial")
summary(mylogit)
logit.boot <- function(data, indices) {
d <- data[indices,]
fit <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = d, family = "binomial")
return(coef(fit))
}
set.seed(123)
results.boot <- boot(data = mydata, statistic = logit.boot, R = 1000)
print(results.boot)
jack_coefs <- matrix(NA, nrow = nrow(mydata), ncol = length(coef(mylogit)))
colnames(jack_coefs) <- names(coef(mylogit))
for (i in 1:nrow(mydata)) {
data_jack <- mydata[-i, ]
fit_jack <- glm(abandoned ~ discount + female + num_other_meds + final_copay + pharmacy_distance,
data = data_jack, family = "binomial")
jack_coefs[i, ] <- coef(fit_jack)
}
# Calculating differences between jackknife and full model coefficients
full_model_coefs <- coef(mylogit)
jack_diffs <- sweep(jack_coefs, 2, full_model_coefs, "-")
# Compute influence measure for each observation
influence_measure <- apply(jack_diffs, 1, function(x) sqrt(sum(x^2)))
# Define a threshold for significant influence
threshold <- mean(influence_measure) + 2 * sd(influence_measure)
# Identify outliers
outliers <- which(influence_measure > threshold)
# Printing Outliers
print(outliers)
getwd()
setwd(/Users/tianyigao/desktop/bis620.2023)
setwd('/Users/tianyigao/desktop/bis620.2023')
getwd()
setwd('/Users/tianyigao/desktop/bis620.2023')
getwd()
